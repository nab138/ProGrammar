{"name":"☕ Java Programming","id":"java-programming","description":"Learn the fundamentals of Java programming language. This covers concepts such as variables, primitive vs reference types, control flow, arrays, classes, objects, methods, inheritance, polymorphism, and more.","difficulty":1,"units":[{"name":"Primitive Variables","id":"primitive-variables","description":"Learn about primitive variables in Java.","lessons":[{"name":"Intro to Programming","description":"","questions":[{"type":"text","question":"# Intro to Programming\n\nThis course is for anyone from absolute beginners to intermediate programmers. You do not need any experience for this course.\n\n\nBefore we get into this units topic, variables, let's talk about a couple core programming concepts, and how this course will work.","rich":true},{"type":"text","question":"# Intro to Programming\n\nWhen you write code, at its very core, you are writing a list of instructions which the computer will execute, one by one. These instructions can do many different things.","rich":true},{"type":"text","question":"# Intro to Programming\n\nIn java, the language this course will teach you, as well as many other languages, each instruction is usually one line of code.\n\n> In some cases, you can have multiple instructions on one line, and we will look at this later.\n\n```md\nThis is called a codeblock, and it's where you\nwill see code. When writing real code, it is\nhighlighted with pretty colors to make it\neasier to read.\n```\n\nCode is displayed in a [monospace](A%20font%20whose%20characters%20all%20take%20up%20the%20same%20amount%20of%20horizontal%20space) font, giving it the distincitve look you see above.","rich":true},{"type":"text","question":"# Intro to Programming\n\nThese lines are usually put inside methods, but we won't have to worry about these for now.\n\nEach statement/instruction/line is almost always ended with a [semicolon](;) to tell java where the instruction ends.\n\n```\neach line of code;\ngets executed;\none after;\nthe other;\n```","rich":true},{"type":"text","question":"# This Course\n\nThroughout this course, you will see questions in the middle of lessons to keep you engaged, as well as a couple dedicated quiz lessons. Don't worry if you get things wrong or forget things! We will keep re-enforcing concepts throughout the course, and if you're really worried, you can always try again if you want.\n\nGood Luck!\n\n\\- Nick (nab138)","rich":true}],"id":"intro-to-programming","type":"learn"},{"name":"Variables Basics","id":"variables","type":"learn","questions":[{"type":"text","question":"# Variables\n\nA variable in java is used to store information. They are similar to algebraic variables, with one key difference: they can store different types of values.\n\nVariables can store text, numbers, booleans, and much, much more. You can think of variables like a box, that can store a value inside.\n\n> Variables are broken up into two main catagories of types: primitive and reference.\n\nThere are several different primitive types, however the most common ones are integers, doubles, chars, and booleans.\n\n> Protip! These boxes provide extra information that can help grow your knowledge. They are here to give additional info and introduce concepts which we will go over later.\n","rich":true},{"type":"mc","question":"How would you describe the purpose of a variable in Java?","choices":["Variables are used to perform mathematical operations only.","Variables are used to store information and can hold different types of values.","Variables are only used for controlling the flow of a program.","Variables are used to define the structure of a class."],"answer":"Variables are used to store information and can hold different types of values.","explanations":["Variables can store many different types of values, including numbers, text, and booleans. They are not limited to performing mathematical operations.","Correct! Variables in Java are used to store information and can hold different types of values.","Variables can be used in some cases to control the flow of a program, but that is not their only use.","Defining the structure of a class is done through class declarations, not variables."]},{"type":"text","question":"To make a variable, you write something called a [declaration](A%20statement%20which%20declares%20a%20variable). To declare variables, you must this basic syntax:\n\n```java\nVariableType variableName = variableValue;\n```\n\n> Sometimes, you will see `public` or `private` written before the type. These are called visibility modifiers, which we will cover later.\n","rich":true},{"type":"text","question":"In some cases, you don't want to give the variable a value immediatley. In that case, you can omit the equals sign.\n\n```java\nVariableType variableName;\n```\n\nWhen you initialize a primitive type with no inital value, it is given a default value matching its type. Some examples of these are shown below.\n\n| Type | Default Value |\n| ------- | ------------- |\n| int | 0 |\n| double | 0.0 | \n| boolean | false |\n| char | \\u0000 |","rich":true},{"type":"mc","question":"What comes first in a variable declaration?","choices":["The type of the variable","The name of the variable","The value of the variable","The scope of the variable"],"answer":"The type of the variable","explanations":["Correct! The type comes first.","The name of the variable comes after the type.","The value of the variable goes at the end of the declaration.","The scope of the variable is not part of the declaration."]},{"type":"mc","question":"# What would the value of `myVariable` be?\n\n```java\nint myVariable;\n```\n","rich":true,"choices":["0","1","null","This will not compile."],"answer":"0","explanations":["Correct! Primitive variables are usually given a default value representing \"nothing\" of that type.","Primitive variables are usually given a default value representing \"nothing\" of that type, in this case, 0.","While reference type variables have a default value of null, primitive variables do not.","Java will automatically assign a default value to primitive variables, so this will compile."]},{"type":"text","question":"```java\nVariableType variableName = variableValue;\n```\n\n`VariableType` represents the type of the variable, telling java what kinds of values will be stored there. \n\n> There are many built-in types, and you can even make your own later! Some common ones include integers, doubles, Strings, and booleans.","rich":true},{"type":"text","question":"```java\nVariableType variableName = variableValue;\n```\n\n`variableName` represents the name of the variable, so you can access it later. When you use this name in an expression, java fills in the value of the variable.\n\nVariables are named in a specific way in java, known as camel case. The first letter is always lowercase, and any following words start with an uppercase letter. If you don't name it correctly, it will still [compile](The%20process%20of%20converting%20your%20text%20code%20to%20real%20machine%20code%20which%20is%20run%20by%20the%20computer), but is considered bad practice.\n\nYou **_cannot_** include spaces in a variable name! It will not compile if you do!\n","rich":true},{"type":"mc","question":"Which of the following is a good variable name?","choices":["myVar","MyVar","my_var","My Var"],"answer":"myVar","explanations":["Correct! Camel case is the standard for java variable names.","Camel case starts with a lowercase letter.","Instead of underscores, camel case uses capital letters to separate words.","Spaces are not allowed in variable names."]},{"type":"text","question":"```java\nVariableType variableName = variableValue;\n```\n\nThe `=` symbol is known as the assignment operator, and assigns your new variable a value. The variable on the left is assigned to whatever the value on the right is.","rich":true},{"type":"text","question":"```java\nVariableType variableName = variableValue;\n```\n\n`variableValue` represents the value you will initialize your variable with. It must be something of the type you declared you variable to be. For example, if you used type integer, you could assign it a value of 5, but not of \"Hello, World!\"","rich":true},{"type":"text","question":"```java\nVariableType variableName = variableValue;\n```\n\nFinally, the `;` (semicolon) is used to denote the end of a statement. These are almost always put at the end of a line of Java code, with the exception of control flow and class/method declarations.\n\n> The semicolon tells java where to stop reading. Without it, your code won't work!\n\nThe semicolon goes at the end of a statement, with no space between it and the previous character.","rich":true},{"type":"mc","question":"# What is wrong with this code?\n\n```java\nint exampleVariable = 6\n```\n","rich":true,"choices":["Nothing, it would work","There is no period at the end of the line","There is a missing semicolon at the end of the line","The wrong type has been assigned to the variable"],"answer":"There is a missing semicolon at the end of the line","explanations":["You must include a semicolon at the end of almost every line of code.","Semicolons are used instead of periods to end lines of code.","Correct!","The type is correct, but the semicolon is missing."]},{"type":"build","hard":true,"question":"Declare a variable named `challengeVar` of type `String`, initialized with the value `\"Hello, Java!\"`.","choices":["String","challenge","Challenge","=","\"Hello, Java!\"",".",";","Var"],"answer":"String challengeVar = \"Hello, Java!\";","rich":true}]},{"name":"Integers","id":"integers","type":"learn","questions":[{"type":"text","question":"# Integers\n\nIntegers are whole numbers, and can be negative or positive. They cannot contain decimals!\n\nTo delcare a variable as an integer, you write `int` as the type. Integers are considered a primitive variable in java, so their type is written in all lowercase. Integer is also shortened to \"Int\".\n\n```java\nint myInt = 5;\n```\n","rich":true},{"type":"mc","question":"What is an integer called in java?","choices":["int","integer","Int","Integer"],"answer":"int","explanations":["Correct!","Some types are shortened in java, such as int for integer.","Primitive types start with a lowercase letter.","Primitive types start with a lowercase letter and are usually shortened."]},{"type":"text","question":"If you don't assign a value to an integer variable, it is given a default value of 0.\n\n```java\nint myInt; // myInt now holds 0.\n```\n\n> Comments, denoted by `//`, are a way to help document code. They do not have any impact on what the code does.\n","rich":true}]},{"name":"Integers Quiz","id":"integers-quiz","type":"quiz","questions":[{"type":"mc","question":"# What could go in the blank?\n\n```java\nint myInt = _;\n```\n","rich":true,"choices":["3.14","\"Hello!\"","7","4.0"],"answer":"7","explanations":["Integers do not contain decimals, they are whole numbers.","Integers are positive or negative whole numbers, not text.","Correct!","Integers do not contain decimals, they are whole numbers."]},{"type":"mc","question":"What is an integer called in java?","choices":["int","integer","Int","Integer"],"answer":"int","explanations":["Correct!","Some types are shortened in java, such as int for integer.","Primitive types start with a lowercase letter.","Primitive types start with a lowercase letter and are usually shortened."]},{"type":"mc","question":"Which of the following is an integer?","choices":["Hello, World!","4.7","-3","2.0"],"answer":"-3","explanations":["Integers are positive or negative whole numbers, not text.","Integers do not contain decimals, they are whole numbers.","Correct!","Integers do not contain decimals, they are whole numbers."]},{"type":"mc","question":"# What value is given to myInt?\n\n```java\nint myInt;\n```\n","rich":true,"choices":["0","1","The code will create an error","-1"],"answer":"0","explanations":["Correct!","Integers have a default value of 0.","Integers have a default value of 0.","Integers have a default value of 0."]},{"type":"build","question":"Declare an integer variable named \"myInt\" with a value of 5.","choices":[";",".","0","5","my","Int","int","="],"answer":"int myInt = 5;"}]},{"name":"Floating Point Numbers","id":"decimals","type":"learn","questions":[{"type":"text","question":"Decimals in java can be stored in a couple different types, namely `float` and `double`.\n\nBoth of these types store the same type of data. The difference between them is that `double`s store twice the number of [bits](A%20single%20binary%201%20or%200,%20stored%20in%20the%20computers%20memory.%20A%20byte%20is%208%20bits.) as `float`s, giving them double the precision. For almost all applications in java, you will use doubles.\n","rich":true},{"type":"mc","question":"What is the most common type for storing decimals called in java?","choices":["double","float","number","decimal"],"answer":"double","explanations":["Correct!","Floats do store decimals, but is not the recommend way in most cases","\"number\" is not a type in Java","\"decimal\" is not a type in Java"]},{"type":"text","question":"When initializing a `double`, you must provide a decimal value.\n\n```java\ndouble myDouble = 0.0;\n```\n\nEven though we are storing a whole number, we still need to give it a decimal, or else it will create an error.\n","rich":true},{"type":"mc","question":"# Which of the following could be assigned to myDouble?\n\n```java\ndouble myDouble = _;\n```\n","rich":true,"choices":["-1.7","1","-2","\"Hello, World!\""],"answer":"-1.7","explanations":["Correct!","The initial value of doubles must contain a decimal point, even if it is a whole number","The initial value of doubles must contain a decimal point, even if it is a whole number","Doubles store decimal numbers, not text"]}]},{"name":"Numbers Review","id":"numbers-quiz","type":"quiz","questions":[{"type":"mc","question":"# What could go in the blank?\n\n```java\ndouble myVar = _;\n```\n","rich":true,"choices":["3.14","\"Hello!\"","7","4.0f"],"answer":"3.14","explanations":["Correct!","Doubles are positive or negative whole numbers, not text.","Doubles store decimal numbers, not whole numbers.","Doubles in java do not end with an f, floats do."]},{"type":"mc","question":"What is an integer called in java?","choices":["int","integer","Int","Integer"],"answer":"int","explanations":["Correct!","Some types are shortened in java, such as int for integer.","Primitive types start with a lowercase letter.","Primitive types start with a lowercase letter and are usually shortened."]},{"type":"mc","question":"Which of the following is an integer?","choices":["'h'","4.2f","0","2.0"],"answer":"0","explanations":["Integers are positive or negative whole numbers, not characters.","Integers do not contain decimals, they are whole numbers. The f at the end of 4.2f makes it a float.","Correct!","Integers do not contain decimals, they are whole numbers."]},{"type":"mc","question":"# What value is given to myVar?\n\n```java\nint myVar;\n```\n","rich":true,"choices":["0","1","The code will create an error","-1"],"answer":"0","explanations":["Correct!","Integers have a default value of 0.","Integers have a default value of 0.","Integers have a default value of 0."]},{"type":"mc","question":"# What value is given to myVar?\n\n```java\ndouble myVar;\n```\n","rich":true,"choices":["0","0.0","The code will create an error","1.0"],"answer":"0.0","explanations":["Doubles store decimal numbers, not whole numbers.","Correct!","Doubles have a default value of 0.0.","Doubles have a default value of 0.0."]},{"type":"build","question":"Declare an integer variable named \"myInt\" with a value of 4.","choices":[";",".","0","4","my","Int","int","=","My"],"answer":"int myInt = 4;"},{"type":"build","question":"Declare an double variable named \"myDouble\" with a value of 3.14.","choices":[";",".","0","3","14","my","Double","int","double","=","My"],"answer":"double myDouble = 3.14;"},{"type":"mc","question":"Which of the following is a double?","choices":["\"Hello, World!\"","3.4f","1","2.0"],"answer":"2.0","explanations":["Doubles are decimal numbers, not text.","The f at the end of 3.4f makes it a float, not a double.","Doubles store decimal numbers, not whole numbers.","Correct!"]},{"type":"mc","question":"What is the most common type used for storing decimals in java?","choices":["float","double","char","int"],"answer":"double","explanations":["Floats do store decimals, but doubles are more common.","Correct!","Chars store single characters, not decimals.","Integers do not contain decimals, they are whole numbers."]}]},{"name":"Booleans","description":"","questions":[{"type":"text","question":"# Booleans\n\nA boolean is a very simple type of variable. It only has two possible values: `true` or `false`.\n\n> This will be very useful later on when we talk about control flow, so it's important to remeber them.\n\nBooleans are also sometimes refered to as \"bools.\"","rich":true},{"type":"mc","question":"Which of the following is a valid value for a boolean?","choices":["true","no","on","0","False"],"explanations":["Correct!","Booleans store \"yes\" or \"no\" as \"true\" or \"false\" instead.","Booleans store \"on\" or \"off\" as \"true\" or \"false\" instead.","Booleans store \"1\" or \"0\" as \"true\" or \"false\" instead.","Booleans have lowercase letters."],"answer":"true"},{"type":"text","question":"# Booleans\nIn java, booleans area called just that: `boolean`.\n\nHere's an example of a boolean declaration:\n\n```java\nboolean example = true;\n```","rich":true},{"type":"build","question":"# Declare a boolean called `myBool` with the value `false`.","choices":[";",".","boolean","bool","Bool","my","My","=","false","False","true"],"answer":"boolean myBool = false;","rich":true}],"id":"booleans","type":"learn"},{"name":"Strings","description":"","questions":[{"type":"text","question":"# Strings\n\nStrings are *not* a primitive variable type. However, they are a weird exception to primtive vs reference type rules in java. You can use them almost the exact same as regular primitive types.","rich":true},{"type":"text","question":"# Strings\n\nStrings can be declared like this:\n\n```java\nString myString = \"Hello, World!\";\n```\n\nNotice the quotes (`\"`) around the text. This creates what is called a \"string literal,\" which can be assigned to Strings. This is similar to the `'` character used for variables of type `char`, except the double quotes allow more than a single character.\n\n> `String` starts with a capital letter, which indicates it is **not** a primtive type. However, in most cases, it behaves as one.","rich":true},{"type":"mc","question":"What is wrong with this declaration of a string?\n\n```java\nString myVar = 'Hello, Java!';\n```","choices":["String should be all lowercase.","Single quotes (') were used instead of double quotes (\").","Nothing, this would work.","There is a semicolon at the end of the line."],"explanations":["String starts with a capital letter because it is not a primitive type, despite acting like one.","Correct! Single quotes are used for single characters, and double quotes for strings.","Single quotes are used for single characters, so they won't work for a string.","The semicolon must be there, it tells java where the line ends."],"answer":"Single quotes (') were used instead of double quotes (\").","rich":true},{"type":"build","question":"# Declare a variable called `myVar` with the value `Hello, World!`","choices":["Hello, World!","'","'","\"","\"","String","my","Var","My","=",";","string"],"answer":"String myVar = \"Hello, World!\";","rich":true}],"id":"strings","type":"learn"},{"name":"Re-assignment","description":"","questions":[{"type":"text","question":"# Re-assignment\n\nSo far, we've only seen variables being declared. What if we want to change their value?\n\nWe can use the same assignment operator from before, in a very similar looking statement to the declaration. Here's an example:\n\n```java\ndouble myVar = 0.0;\nmyVar = 1.0;\n```","rich":true},{"type":"text","question":"# Re-assignment\n\nWhen you re-asign a variable, you don't include the type. The general formula looks like this,\n\n```java\nvariableName = value;\n```\n\nwhich is very similar to the declaration.\n\nThe value you provide ***must*** match the original type! For example, you cannot assign a value of `2` to a boolean variable, you could only assign `true` or `false`. ","rich":true},{"type":"mc","question":"# Which of the following will change the value of `myVar` to `3`?\n\n```java\nint myVar = 1;\n```","choices":["myVar = 3;","myVar = 3.0;","int myVar = 3;","None, it cannot be changed."],"explanations":["Correct!","Close, but 3.0 is a double, not an integer. You still have to assign it to a value of the same type.","This would create a new variable with the same name, not re-assign it.","Variables in java can always be changed, unless a specific keyword is used to keep them constant."],"answer":"myVar = 3;","rich":true},{"type":"build","question":"# Re-assign the following variable:\n\n```java\ndouble myVar;\n```","choices":["myVar","double","Double","2","2.0","=",";","."],"answer":"myVar = 2.0;","rich":true,"hard":true},{"type":"text","question":"# Assignment to another variable\n\nOne thing you can do in java is assign one variable to another variable! This works because of expressions, which is the topic of the next unit. For now, take a look at this example:\n\n```java\nint myInt = 5;\nint mySecondInt = myInt;\n// Now both variables = 5!\n```\n\n`mySecondInt` is assigned to whatever the value of myInt is at that time.","rich":true},{"type":"text","question":"# Re-assignment to a variable\n\nApplying what we just learned to re-assignment, we can do something like this:\n\n```java\nint myInt = 3;\nint mySecondInt = 2;\nmyInt = mySecondInt;\n// Now both myInt and mySecondInt equal 2!\n```","rich":true},{"type":"mc","question":"Which of the following will create a new variable with the value of 5, if added on to this code?\n\n```java\nint myVar = 5;\n```","hard":false,"choices":["myInt = myVar","int myInt = myVar;","myVar = myInt;","myVar = int myInt;"],"explanations":["This is very close, but myInt hasn't been declared, so you must specify a type.","Correct!","myInt doesn't exist yet, so you can't use it as a value.","The variables are swapped around here."],"answer":"int myInt = myVar;","rich":true},{"type":"build","question":"# Re-assign myInt to 7.\n\n```java\nint numApples = 7;\nint myInt = 6;\n```","rich":true,"choices":["int","Int","=","my","num","Apples",";","5"],"answer":"myInt = numApples;"}],"id":"reassignment","type":"learn"},{"name":"More on types","description":"","questions":[{"type":"text","question":"# What's the deal with types?\n\nTypes are very important in java. But why? To answer that, we have to look at what makes primitive variables primitive.\n\n> This lesson and the next lesson will be a little confusing. Don't worry, you don't have to memorize it all now, we will come back to this in future units.","rich":true},{"type":"text","question":"# Primitive Types\n\nPrimitive types are stored directly in memory as a binary value. For example, here:\n\n```java\nint numberOfApples = 5;\n```\n\nThe value `00000101` would be stored in memory.\n\n> You won't need to know the actual binary values, but understanding this concept will make it easier to learn about important concepts in the future.","rich":true},{"type":"text","question":"# Primitive Types\n\nHere's some more examples, showing each types' default value in binary.\n\n\n| Type | Value|Binary|\n|--------|--------|--------|\n| int | 0 |00000000|\n| boolean| false |00000000|\n|char | \\u0000|00000000|\n\n\n","rich":true},{"type":"text","question":"# Primitive Types\n\nDid you notice something on the last page? All of the variables had the same binary value! That's why you have to specify a type. Without it, java won't know how to interpret the bytes!","rich":true},{"type":"mc","question":"# How would myVar be stored in memory?\n\n```java\nint myVar = 2;\n```","rich":true,"choices":["2","00000010","11111111"],"explanations":["This is the value of the variable, but it is stored in binary in memory.","Correct!","11111111 is a much higher number than 2."],"answer":"00000010"}],"id":"types-info","type":"learn"},{"name":"Comments","description":"","questions":[{"type":"text","question":"# Comments\n\nWe talked before briefly about comments in java, which can help to document and explain code. There are several types of comments, used in different situations.","rich":true},{"type":"text","question":"# Inline/Single Line Comments\n\nInline/single line comments are written using `//`. Any text written after `//` Will be interpreted as a comment, and ignored by java. Here's some examples:\n\n```java\n// Create a variable called myInt with value 5\nint myInt = 5;\nint exampleInt = myInt; // exampleInt is now equal to myInt\n```\n\n> Even though you don't have to, its best practice to always put a space after `//`.","rich":true},{"type":"build","question":"# Declare a variable called `myVar` with a value of `2.0`, and write a comment that says \"This is a comment\"","choices":["This is a comment","double","int","Double","myVar","=",";","2.0","2","//"],"answer":"double myVar = 2.0; // This is a comment","hard":false,"rich":true},{"type":"text","question":"# Multiline Comments\n\nIf you want to write a longer comment, you can use the following syntax for multiline comments:\n\n```java\n/* This is a multi-line comment! \nIt can span as many lines as you want,\nuntil you end it with */\n```","rich":true},{"type":"text","question":"# Multiline Comments\n\nYou can also use multi-line comments in the middle of code on a single line, like this:\n\n```java\nint numApples = /* Harvest was good this year! */ 52;\n```","rich":true},{"type":"build","question":"Declare a variable named `myAge` with the value `15`, and put a comment saying \"Holds how old I am\" between the variable name and assignment operator.","choices":["int","myAge","/","*","Holds how old I am","*","/","=","15",";","double","/","/"],"answer":"int myAge /* Holds how old I am */ = 15;","hard":true,"rich":true}],"id":"comments","type":"learn"},{"name":"Variables Final Quiz","description":"","questions":[{"type":"mc","question":"Which of the following is a good variable name?","choices":["exampleVar","ExampleVar","example Var","example-var","example_var","$exampleVar"],"explanations":["Correct!","Camel case variables typically start with a lowercase letter.","Variable names cannot contain spaces.","An uppercase letter is used to show the start of a new word in camel case, not a dash.","An uppercase letter is used to show the start of a new word in camel case, not an underscore.","While variables in java technically can start with $, it is generally considered bad practice."],"answer":"exampleVar","rich":false},{"type":"mc","question":"Which type is used to store true/false values?","choices":["boolean","double","int","bool","String"],"explanations":["Correct!","Doubles store decimal numbers.","Integers store whole numbers.","While bool is a commonly used abbreviation of boolean, java requires you to use boolean instead.","Strings store text."],"answer":"boolean"},{"type":"mc","question":"# What's wrong with this variable declaration?\n\n```java\nint quizVar\n```","rich":true,"choices":["It is missing a semicolon","A value was not assigned","The type is Int, not int","The name is invalid"],"explanations":["Correct! A semicolon must be present at the end of a statement.","Primitive variables that are not assigned are just given a default value.","Primitive types start with a lowercase letter, so int is correct.","The name of the variable is a good name here."],"answer":"It is missing a semicolon"},{"type":"mc","question":"# What's wrong with this variable declaration?\n\n```java\ndouble quizVar = 4.3;\n```","choices":["Nothing, it would work","The type is Double, not double","The semicolon at the end of the line should be a period","The types do not match"],"explanations":["Correct! This declaration looks good!","Primitive types start with a lowercase letter, so double is correct.","Semicolons are used to end statements, not periods.","Nope, 4.3 is a double! Doubles store decimal numbers."],"answer":"Nothing, it would work","rich":true},{"type":"build","question":"# Declare a variable called `quizVar` which will hold a value of `7.2` and add a comment at the end which says \"Now holds 7.2\"","rich":true,"choices":["double","Int","boolean","Double","int","Quiz","quiz","Var","7.2","//","Now holds 7.2",";",".","var","="],"answer":"double quizVar = 7.2; // Now holds 7.2","hard":true},{"type":"mc","question":"Which type is most commonly used to store decimal numbers?","choices":["double","float","int","boolean"],"explanations":["Correct!","Floats do store decimal numbers, but are used much less than doubles.","Ints store whole numbers, not decimals.","Booleans store true/false values, not decimals."],"answer":"double"},{"type":"build","question":"# Create a variable called `quizVar` with a value of 0.","choices":["int","Int",";","double","Double","Quiz","quiz","var","Var","="],"answer":"int quizVar;","rich":true},{"type":"build","question":"# Create a variable called `quizVar` which will hold `true` when added to the following line:\n\n```java\nboolean givenVar = true;\n```","choices":["boolean","Boolean","double","quiz","Var","Quiz","=",";","given","Var","."],"answer":"boolean quizVar = givenVar;","rich":true},{"type":"mc","question":"# What could go in the blank?\n\n```java\nboolean quizVar = _;\n```","rich":true,"choices":["1","false","\"Hello, World!\"","2.3"],"explanations":["Booleans hold true/false values, not numbers.","Correct!","Booleans hold true/false values, not text.","Booleans hold true/false values, not numbers."],"answer":"false"},{"type":"mc","question":"# What could go in the blank?\n\n```java\nint quizVar = _;\n```","rich":true,"choices":["3.0","-1","\"Hello, World\"","true"],"explanations":["Despite being a whole number, 3.0 has a decimal, which means it cannot be stored in an int.","Correct! Negative numbers are integers too!","Ints store whole numbers, not text.","Ints store whole numbers, not true/false values."],"answer":"-1"}],"id":"variables-final-quiz","type":"quiz"}]},{"name":"Expressions & Operators","id":"expressions","description":"Learn about expressions and basic operators in Java.","lessons":[{"name":"Intro to Expressions & Operators","id":"expressions","type":"learn","questions":[{"type":"text","question":"# What is an expression?\n\nIf you know what an expression is in math, expressions in java are very similar.\n\nThe main idea is that expressions can perform mathematical, logical, and more operations on variables, and it will be evaluated to a single value.\n","rich":true},{"type":"text","question":"**“*An expression is a construct made up of variables, operators, and method invocations, which are constructed according to the syntax of the language, that evaluates to a single value.*”** \n\n– Java Documentation\n\n---\n\nThis quote, sourced directly from java docs, explains what expressions are. We haven't talked about everything in here yet, but we will soon!","rich":true},{"type":"text","question":"# How do I use expressions?\n\nYou've already used them! When you assign a variable, like this:\n\n```java\nint myVar = 5;\n```\n\nThere already is an expression: `5`! While it is an extremely simple expression, that doesn't perform any operations, it is still an expression.\n","rich":true},{"type":"mc","question":"# What part of this statement is an expression?\n\n```java\ndouble myVar = 5.0;\n```\n","rich":true,"choices":["double","myVar","=","5.0"],"answer":"5.0","explanations":["double is a type, not an expression.","myVar is the name of a variable, not an expression.","= is an assignment operator, not an expression.","Correct! While 5.0 is a literal, it is also an expression."]},{"type":"text","question":"# More complex expressions\n\nLet's take a look at a more complex example.\n\n```java\nint myInt = 4 + 5;\n```\n\nThis expression features a new operator: The addition operator (`+`)! It's pretty self explanatory, and myInt now stores 9.\n","rich":true},{"type":"mc","question":"What value is stored in exampleVar?\n\n```java\nint myVar = 3;\nint exampleVar = myVar + 2;\n```","choices":["2","\"myVar + 2\"","5","3"],"explanations":["myVar holds 3, which gets added to the literal value of 2 to make 5.","This would be correct if there were quotes around the expression, but there aren't, so it is evaluated mathematically.","Correct!","Oops, you might've forgotten to add 2."],"answer":"5","rich":true}]},{"name":"New Lesson","description":"","questions":[],"id":"new-lesson","type":"learn"}]}]}